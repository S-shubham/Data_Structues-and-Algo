
Given base and n that are both 1 or more, compute recursively (no loops) the value of base to the n power, so powerN(3, 2) is 9 (3 squared).


powerN(3, 1) → 3
powerN(3, 2) → 9
powerN(3, 3) → 27

..................................................O(log n)...................................



// Program to find the sum of digits of given number

#include<bits/stdc++.h>
using namespace std;

int findpower(int base,int power)
{
	if(power==0)
	return 1;
	int val=findpower(base,power/2);
	if(power%2==0)
	return val*val;
	return val*val*base;
}

int main()
{
	int base=2,power=9;
	cout<<"power is : "<<findpower(base,power);
}

...................................................O(n)......................................

// Program to find the sum of digits of given number

#include<bits/stdc++.h>
using namespace std;

int findpower(int base,int power)
{
	if(power==0)
	return 1;
	return (base* findpower(base,power-1));
}

int main()
{
	int base=2,power=10;
	cout<<"power is : "<<findpower(base,power);
}
