void DFS(node * graph[],int n) 
{
	bool visited[n];
	for(int i=0;i<n;i++)  
	visited[i]=0;
	  
	visited[0]=1; 
	stack<int>s; 
	s.push(0);
	cout<<0<<" ";  
	while(!s.empty())
	{
		int val=s.top();
		node * trav=graph[val];
		int flag=1;
		while(trav)
		{
			if(visited[trav->nebor]==0)
			{
					s.push(trav->nebor);
					visited[trav->nebor]=1;
					cout<<trav->nebor<<" ";
					flag=0;
			}
			trav=trav->next;
		}
		if(flag)
		s.pop();
	}
}
