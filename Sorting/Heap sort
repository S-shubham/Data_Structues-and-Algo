#include<bits/stdc++.h>
using namespace std;

class Heap{
		
		public:
		int length;
		void max_heapify(int arr[],int i,int n);
		void build_Maxheap(int arr[],int n);
		void heapsort(int arr[],int n);
};

void Heap::max_heapify(int arr[],int i,int n)
{
	int left=2*i;
	int right=2*i+1;
	int largest;
	if(left<=n && arr[left]>arr[i])
	largest=left;
	else
	largest=i;
	if(right<=n && arr[right]>arr[largest])
	largest=right;
	if(i!=largest)
	{
		int temp=arr[i];
		arr[i]=arr[largest];
		arr[largest]=temp;
		max_heapify(arr,largest,n);
	}
}

void Heap::build_Maxheap(int arr[],int n)
{
	for(int i=n/2;i>=1;i--)
	max_heapify(arr,i,n);
}

void Heap::heapsort(int arr[],int n)
{
	int heap_size=n;
	build_Maxheap(arr,n);
	
	for(int i=n;i>=2;i--)
	{
		int temp=arr[1];
		arr[1]=arr[i];
		arr[i]=temp;
		--heap_size;
		
		max_heapify(arr,1,heap_size);
	}
}

int main()
{
	int n=11;
	int arr[n]={0,12,8,6,9,44,32,1,14,64,5};
	
	Heap obj;
	obj.length=n;
	obj.heapsort(arr,n-1);
	for(int i=0;i<n;i++)
	cout<<arr[i]<<" ";
}
