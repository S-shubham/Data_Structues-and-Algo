// Storing a graph using adjaceny lsit 

#include<bits/stdc++.h>
using namespace std;

void BFS(const vector<vector <int>> &v)
{
    int length = v.size();
    
    // If the vector is empty return 
    if(!length)
    return;
    
    // This will initialize all the values with 0/false
    bool travelled [length] = {0};
    
    //stack to keep track of all the nodes.
    queue<int> q;
    
    // Start with the first node.
    //push it into stack
    q.push(0);
    
    
    while(!q.empty())
    {
        // Acquire the front element;
        int front = q.front();
        // print the current node : 
        cout<<"Current node is : "<<front<<endl;
        //Pop the front element;
        q.pop();
        
        // Let's travel each adajacent element of the current node
        for(auto itr =v[front].begin();itr!=v[front].end();++itr)
        {
            if(travelled[*itr] == 1)
            continue;
            else {
                q.push(*itr);
                travelled[*itr] = true;
            }
        }
    }
    
    
}

int main()
{
    vector<vector <int> > v(5);
    
    // Store for vertex 0
    v[0].push_back(1);
    v[0].push_back(2);
    v[0].push_back(4);
    
    // Store for vertex 1
    v[1].push_back(0);
    v[1].push_back(2);
    v[1].push_back(3);
    
    // Store for vertex 2 
    v[2].push_back(0);
    v[2].push_back(1);
    v[2].push_back(4);
    
    // Store for vertex 3 
    v[3].push_back(1);
    v[3].push_back(4);
    
    // Store for vertex 4 
    v[4].push_back(0);
    v[4].push_back(2);
    v[4].push_back(3);
    
    // Now, let's print the vector topology
    
    // for(int i=0;i<5;i++)
    // {
    //     cout<<"\nNode "<<i<<" -> ";
    //     for(auto itr = v[i].begin(); itr!= v[i].end(); itr++)
    //     {
    //         cout<<*itr<<" -> ";
    //     }
    // }
    
    BFS(v);
    
}
