// Storing a graph using adjaceny lsit 

// http://web.cs.unlv.edu/larmore/Courses/CSC477/bfsDfs.pdf

#include<bits/stdc++.h>
using namespace std;

void DFS(const vector<vector <int>> &v)
{
    // Find the no. of vertices in graph
    int length = v.size();
    
    if(!length){
        cout<<"Graph is empty";
        return;
    }
    
    // Create a boolean array to keep track of all the visited nodes
    bool visited [length] = {0};
    
    // Create a stack to keep track of nodes;
    stack <int> s;
    
    // Start from the first element
    // Push it into stack;
    
    s.push(0);
    
    while(!s.empty())
    {
        // Get the first element
        int current = s.top();
        s.pop();
        visited[current]=true;
        cout<<"\nThe current element is : "<<current;
        
        for(auto itr = v[current].begin(); itr!=v[current].end(); ++itr)
        {
            if(visited[*itr])
            continue;
            else {
                visited[*itr] = true;
                s.push(*itr);
                //cout<<"pushing: "<<*itr<<endl;
            }
        }
        
    }
}

int main()
{
    vector<vector <int> > v(5);
    
    // Store for vertex 0
    v[0].push_back(1);
    v[0].push_back(2);
    v[0].push_back(4);
    
    // Store for vertex 1
    v[1].push_back(0);
    v[1].push_back(2);
    v[1].push_back(3);
    
    // Store for vertex 2 
    v[2].push_back(0);
    v[2].push_back(1);
    v[2].push_back(4);
    
    // Store for vertex 3 
    v[3].push_back(1);
    v[3].push_back(4);
    
    // Store for vertex 4 
    v[4].push_back(0);
    v[4].push_back(2);
    v[4].push_back(3);
    
    // Now, let's print the vector topology
    
    // for(int i=0;i<5;i++)
    // {
    //     cout<<"\nNode "<<i<<" -> ";
    //     for(auto itr = v[i].begin(); itr!= v[i].end(); itr++)
    //     {
    //         cout<<*itr<<" -> ";
    //     }
    // }
    vector<vector <int> > v1;
    
    DFS(v);
    
}
